#!/usr/bin/env bash

default_test_file="${test_file:-${1:-spec/tests.sh}}"

declare -a failures=()
declare -a successes=()
declare total_test_num=0
declare pass_test_num=0
declare fail_test_num=0


not() {
	! "$@"
}

setup() {
	:
}

teardown() {
	:
}

test_package_signature() {
	local version="${1}"; shift
	local fpr="${1:?Missing fingerprint}"
	local archive_name="${2}"
	run_test \
		"Expected signature for version \e[1m${version}\e[22m is signed by '\e[1m${fpr}\e[22m'" \
		signature_fingerprint_is "${fpr}" "${version}" "${archive_name}"
}

warn() {
	>&2 echo "$@"
}

signature_fingerprint_is() {
	local fpr="${1:?Missing fingerprint}"; shift
	local version="${1:?Missing version}"; shift
	local archive_name="${1}"; shift
	local zip_tar="${1}"

	local has_zip
	local has_tar

	if [[ -n "${zip_tar}" ]]; then
		if [[ "${zip_tar}" = *z* ]]; then
			has_zip=1
		fi

		if [[ "${zip_tar}" = *t* ]]; then
			has_tar=1
		fi
	fi

	local cmd=(
		./rel-sign.sh
		-V
		-r rnpgp/rnp
		-v "${version}"
		--gpg
		--explicit-archive
		verify-remote
		)

	if [[ -n "${has_zip}" ]]; then
		cmd+=(-z "${archive_name}.zip")
	fi

	if [[ -n "${has_tar}" ]]; then
		cmd+=(-t "${archive_name}.tar.gz")
	fi

	warn will run: "${cmd[@]}"
	assert_eq "${fpr}" \
		"$(check_gpg_fpr_eq "${fpr}" "${cmd[@]}")"
}

check_gpg_fpr_eq() {
	local fpr="${1}"; shift

	"$@" 2>&1 >/dev/null | \
		command sed '/using.*key/!d; s/^.* //' | \
		command uniq | \
		command grep "${fpr}"
}

assert_eq() {
	local expected="${1}"; shift
	local actual="${1}"

	if [[ "$expected" = "$actual" ]]
	then
		:
	else
		warn "Expected \`${expected}\` but got \`${actual}\`."
		false
	fi
}



run_test() {
	local expectation_message="${1?}"
	shift
	local -a cmd=("$@")
	set +e
	"$@" >/dev/null
	local rv=$? || :
	# set -e

	((++total_test_num)) || :

	local test_raw_name="${FUNCNAME[1]}"
	if [[ "${FUNCNAME[1]}" = _* ]]
	then
		test_raw_name="${FUNCNAME[2]}"
	fi
	local test_name="${test_raw_name#test_}"
	test_name="${test_name//_/ }"

	if [[ $rv = 0 ]]
	then
		((++pass_test_num)) || :
		successes+=("${test_name}: ${expectation_message}:::${cmd[*]}")
		printf '\e[32m.\e[m'
	else
		((++fail_test_num)) || :
		failures+=("${test_name}: ${expectation_message}:::${cmd[*]}")
		printf '\e[31mF\e[m'
	fi
	return $rv
}

print_summary() {
	local success_idx=0
	local failure_idx=0
	echo
	echo "=== Summary ==="
	if [[ "${#successes[@]}" -gt 0 ]]
	then
		echo
	fi

	for passed_test in "${successes[@]}"
	do
		((success_idx++)) || :
		local test_name__expectation_message="${passed_test%:::*}"
		local test_cmd="${passed_test#*:::}"
		local test_name="${test_name__expectation_message%: *}"
		local expectation_message="${test_name__expectation_message#*: }"
		printf "   \e[32;1m%b\e[22m passed\e[m\n" "${expectation_message}"
	done

	if [[ "${#failures[@]}" -gt 0 ]]
	then
		echo
	fi

	for failed_test in "${failures[@]}"
	do
		((failure_idx++)) || :
		local test_name__expectation_message="${failed_test%:::*}"
		local test_cmd="${failed_test#*:::}"
		local test_name="${test_name__expectation_message%: *}"
		local expectation_message="${test_name__expectation_message#*: }"
		printf "\e[1mFailure #%d:\e[22m\n" "${failure_idx}"
		printf "   \e[31;1m%b\e[22m failed\e[m\n\n" "${test_name}"
		printf "   \e[34m%b\e[m\n" "${expectation_message}"
		printf "   \e[mCommand: \e[31m%s\e[m\n" "${test_cmd}"
		echo
	done
	printf 'Total: %s test(s), %s passed, %s failed\n' "${total_test_num}" "${pass_test_num}" "${fail_test_num}"
}

trap print_summary EXIT

return_status() {
	! (( fail_test_num ))
}

main() {
	setup
	if [[ $# -gt 0 ]]
	then
		for test_file in "$@"
		do
			. "${test_file}"
		done
	else
		. "${default_test_file}"
	fi
	teardown
	return_status
}

main "$@"
